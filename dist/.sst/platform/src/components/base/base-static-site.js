import fs from "fs";
import path from "path";
import { all, output } from "@pulumi/pulumi";
import { VisibleError } from "../error.js";
import { siteBuilder } from "../aws/helpers/site-builder.js";
export function prepare(args) {
    const sitePath = normalizeSitePath();
    const environment = normalizeEnvironment();
    const indexPage = normalizeIndexPage();
    generateViteTypes();
    return {
        sitePath,
        environment,
        indexPage,
    };
    function normalizeSitePath() {
        return output(args.path).apply((sitePath) => {
            if (!sitePath)
                return ".";
            if (!fs.existsSync(sitePath)) {
                throw new VisibleError(`No site found at "${path.resolve(sitePath)}".`);
            }
            return sitePath;
        });
    }
    function normalizeEnvironment() {
        return output(args.environment).apply((environment) => environment ?? {});
    }
    function normalizeIndexPage() {
        return output(args.indexPage).apply((indexPage) => indexPage ?? "index.html");
    }
    function generateViteTypes() {
        return all([sitePath, args.vite, environment]).apply(([sitePath, vite, environment]) => {
            // Build the path
            let typesPath = vite?.types;
            if (!typesPath) {
                if (fs.existsSync(path.join(sitePath, "vite.config.js")) ||
                    fs.existsSync(path.join(sitePath, "vite.config.ts"))) {
                    typesPath = "src/sst-env.d.ts";
                }
            }
            if (!typesPath) {
                return;
            }
            // Create type file
            const filePath = path.resolve(path.join(sitePath, typesPath));
            const content = `/* This file is auto-generated by SST. Do not edit. */
/* tslint:disable */
/* eslint-disable */
/// <reference types="vite/client" />
interface ImportMetaEnv {
${Object.keys(environment)
                .map((key) => `  readonly ${key}: string`)
                .join("\n")}
}
interface ImportMeta {
  readonly env: ImportMetaEnv
}`;
            const fileDir = path.dirname(filePath);
            fs.mkdirSync(fileDir, { recursive: true });
            fs.writeFileSync(filePath, content);
        });
    }
}
export function buildApp(parent, name, build, sitePath, environment) {
    if (!build)
        return sitePath;
    const result = siteBuilder(`${name}Builder`, {
        create: output(build).command,
        update: output(build).command,
        dir: output(sitePath).apply((sitePath) => path.join($cli.paths.root, sitePath)),
        environment,
        triggers: [Date.now().toString()],
    }, {
        parent,
        ignoreChanges: process.env.SKIP ? ["*"] : undefined,
    });
    // Validate build output
    return all([sitePath, build, result.id]).apply(([sitePath, build, _]) => {
        const outputPath = path.join(sitePath, build.output);
        if (!fs.existsSync(outputPath)) {
            throw new VisibleError(`No build output found at "${path.resolve(outputPath)}".`);
        }
        return outputPath;
    });
}
